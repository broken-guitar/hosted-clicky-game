{"version":3,"sources":["logo.svg","components/Card/index.js","components/ScoreBoard/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","style","backgroundImage","image","onClick","score","id","ScoreBoard","verticalAlign","total","status","Container","children","App","state","cards","cardIds","goal","includes","setState","push","length","console","log","i","j","Math","floor","random","this","map","card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+lBAAAA,EAAOC,QAAU,IAA0B,kC,oLCc5BC,G,kBAXF,SAAAC,GAAK,OAChB,yBACCC,UAAU,2BACVC,MAAO,CAACC,gBAAiB,OAASH,EAAMI,MAAQ,KAChDC,QAAS,kBAAML,EAAMM,MAAMN,EAAMO,MAC9B,yBAAKN,UAAU,mBACXD,EAAMO,O,eCGDC,EAPI,SAAAR,GAAK,OACtB,yBAAKC,UAAU,aACb,wBAAIA,UAAU,cAAd,cAAsC,kBAAC,IAAD,CAAOA,UAAU,aAAaC,MAAO,CAACO,cAAc,YAA1F,IAAwGT,EAAMU,OAC9G,wBAAIT,UAAU,eAAeD,EAAMW,UCGxBC,G,MAPG,SAAAZ,GAAK,OACnB,yBAAKC,UAAU,WACX,yBAAKA,UAAU,mBACVD,EAAMa,a,OC6EJC,E,4MA1EXC,MAAQ,CACJC,QACAC,QAAS,GACTX,MAAO,EACPY,KAAM,EACNP,OAAQ,I,EAGZL,MAAQ,SAAAC,GACJ,IAAIU,EAAU,EAAKF,MAAME,QAEzB,GAAIA,EAAQE,SAASZ,GACjB,EAAKa,SAAS,CACVH,QAAS,GACTX,MAAO,EACPK,OAAS,kDAJjB,CAUI,GAFAM,EAAQI,KAAKd,GAEU,IAAnBU,EAAQK,OAGR,OAFA,EAAKF,SAAS,CAACd,MAAO,EAAGK,OAAQ,oDAAqDM,QAAS,UAC/FM,QAAQC,IAAI,WAIhB,EAAKJ,SAAS,CACVJ,QACAC,UACAX,MAAOW,EAAQK,OACfX,OAAQ,KAGZ,IAAK,IAAIc,EAAIT,EAAMM,OAAS,EAAGG,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADD,EAEhB,CAACT,EAAMU,GAAIV,EAAMS,IAAvCT,EAAMS,GAFgC,KAE5BT,EAAMU,GAFsB,Q,uDASzC,IAAD,OACL,OACI,yBAAKzB,UAAU,OACX,4BAAQA,UAAU,cACd,wBAAIA,UAAU,aAAd,kBACA,uBAAGA,UAAU,aAAb,+CAIJ,kBAAC,EAAD,CAAYS,MAAOoB,KAAKf,MAAMT,MAC1BY,KAAM,EACNP,OAAQmB,KAAKf,MAAMJ,SAGvB,kBAAC,EAAD,KACKmB,KAAKf,MAAMC,MAAMe,KAAI,SAAAC,GAAI,OACtB,kBAAC,EAAD,CACI1B,MAAO,EAAKA,MACZC,GAAIyB,EAAKzB,GACT0B,IAAKD,EAAKzB,GACVH,MAAO4B,EAAK5B,YAIxB,sC,GApEE8B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.f7064b7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n  <div\n   className=\"card img-container hover\"\n   style={{backgroundImage: \"url(\" + props.image + \")\" }}\n   onClick={() => props.score(props.id)}>\n      <div className=\"h3 card-id-text\">\n         {props.id}\n      </div>\n  </div>\n);\n\nexport default Card;","import React from \"react\";\nimport \"./ScoreBoard.css\";\nimport { FaCaretRight as Arrow} from \"react-icons/fa\";\n\n//stateless component\nconst ScoreBoard = props => (\n  <div className=\"score-box\">\n    <h3 className=\"score-text\">Your Score <Arrow className=\"arrow-icon\" style={{verticalAlign:\"middle\"}}/> {props.total}</h3>\n    <h3 className=\"status-text\">{props.status}</h3>\n  </div>\n);\n\nexport default ScoreBoard;","import React from \"react\";\nimport \"./Container.css\";\n\n//stateless component\nconst Container = props => (\n    <div className=\"wrapper\">\n        <div className=\"cards-container\">\n            {props.children}\n        </div>   \n    </div>\n);\nexport default Container;","import React, { Component } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\n// import components\nimport Card from \"./components/Card\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport Container from \"./components/Container\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n    state = {\n        cards,\n        cardIds: [],\n        score: 0,\n        goal: 8,\n        status: \"\"\n    };\n    \n    score = id => {\n        let cardIds = this.state.cardIds;\n    \n        if (cardIds.includes(id)) {\n            this.setState({\n                cardIds: [],\n                score: 0,\n                status:  \"Game Over! You lost. Click to play again!\"\n            });\n            return;\n        } else {\n            cardIds.push(id)\n    \n            if (cardIds.length === 8) {\n                this.setState({score: 8, status: \"You Won! Great Job, Smartie! Click to play again!\", cardIds: []});\n                console.log('You Win');\n                return;\n            }\n    \n            this.setState({\n                cards,\n                cardIds,\n                score: cardIds.length,\n                status: \"\"\n            });\n    \n            for (let i = cards.length - 1; i > 0; i--) {\n                let j = Math.floor(Math.random() * (i + 1));\n                [cards[i], cards[j]] = [cards[j], cards[i]];\n            }\n        }\n      }\n    // TODO methods to handle game play shuffle and scoring logic\n\n    // Map over this.state.cards and render a Card component for each card object\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Click that Cat</h1>\n                    <p className=\"App-intro\">\n                        But try not to click the same image twice!\n                    </p>\n                </header>\n                <ScoreBoard total={this.state.score}\n                    goal={8}\n                    status={this.state.status}\n                />\n                \n                <Container>\n                    {this.state.cards.map(card => (\n                        <Card\n                            score={this.score}\n                            id={card.id}\n                            key={card.id}\n                            image={card.image}\n                        />\n                ))}\n                </Container>\n                <footer>\n               \n                </footer>\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}